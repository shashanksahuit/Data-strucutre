in any data strucure there will be 3 operations
store or add [insert]
search 
delete

you have to play with these 3 operation in any data structure 
Always try to compare the Data-structure based on these operation 
******************************************************************************


BST --> o (log N) in Binary search Tree 
access or Search operation in constant time o(1);

HashMaps
in hashmap we store the key and value 
key , value 

-------------grep command use the HashMap --> [google it and read about it]

HashCode --> with some formula you will calaclulate this hashcode 

key should be the  posistive Integer 
Hashcode can be very large so we have to reduce it


collision 
we have 2 ways to aviod the Collision 
      1. chaining 
      2. open addressing

worst case in chaining --> inside linkedList , you have to iterate over the all linkedlist and in that case time complexity O(N).

Simple uniform Hashing 
universal hashing 

**********************************************************************************************************************************************************

combination sum problem 
combination sum 2 problem 

A subsequence is a sequence of the elements of the array obtained by deleting some elements of the array and preserving the order of the array elements.

Consider an array:

array = [1,2,3,4]

Subarray : [1,2],[1,2,3] - is continous and maintains relative order of elements

Subsequence: [1,2,4] - is not continous but maintains relative order of elements

Subset: [1,3,2] - is not continous and does not maintain relative order of elements

Some interesting observations :

Every Subarray is a Subsequence.
Every Subsequence is a Subset.

Array : 1,2,3,4,5,6,7,8,9
Sub Array : 2,3,4,5,6 >> Contagious Elements in order
Sub Sequence : 2,4,7,8 >> Elements in order by skipping any or 0 elements
Subset : 9,5,2,1 >> Elements by skipping any or 0 elements but not in order
















